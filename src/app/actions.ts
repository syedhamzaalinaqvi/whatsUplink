'use server';

import { z } from 'zod';
import { generateGroupLinkPreview } from '@/ai/flows/generate-group-link-preview';
import type { GroupLink } from '@/lib/data';

const submitGroupSchema = z.object({
  title: z.string().min(3, 'Title must be at least 3 characters'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  link: z.string().url('Please enter a valid WhatsApp group link'),
  category: z.string().min(1, 'Please select a category'),
  country: z.string().min(1, 'Please select a country'),
});

export type FormState = {
  message: string;
  group?: GroupLink;
  errors?: {
    title?: string[];
    description?: string[];
    link?: string[];
    category?: string[];
    country?: string[];
  };
};

export async function submitGroup(
  prevState: FormState,
  formData: FormData
): Promise<FormState> {
  const validatedFields = submitGroupSchema.safeParse({
    title: formData.get('title'),
    description: formData.get('description'),
    link: formData.get('link'),
    category: formData.get('category'),
    country: formData.get('country'),
  });

  if (!validatedFields.success) {
    return {
      message: 'Validation failed. Please check your input.',
      errors: validatedFields.error.flatten().fieldErrors,
    };
  }

  const { title, description, link, category, country } = validatedFields.data;

  try {
    const { previewImage } = await generateGroupLinkPreview({
      groupLinkTitle: title,
      groupLinkDescription: description,
    });

    const newGroup: GroupLink = {
      id: new Date().toISOString(), // In a real app, this would be generated by Firestore
      title,
      description,
      link,
      imageUrl: previewImage,
      imageHint: 'AI generated',
      category,
      country,
    };

    // Here you would save the `newGroup` to Firestore.
    // For this example, we'll return it to the client to be displayed.
    return {
      message: 'Group submitted successfully!',
      group: newGroup,
    };

  } catch (error) {
    console.error('AI generation failed:', error);
    return { message: 'Failed to generate preview image. Please try again.' };
  }
}
