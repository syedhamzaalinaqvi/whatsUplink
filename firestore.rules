/**
 * @fileoverview Firestore Security Rules for WhatsApp Group Link Submissions
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access to group information while strictly controlling write access.
 * Only authenticated users can create, update, or delete groups.
 *
 * Data Structure:
 * The database stores group information in the `/groups/{groupId}` collection.
 *
 * Key Security Decisions:
 * - Group listings are public to facilitate discovery.
 * - Only authenticated users can create, update, and delete group information.
 *
 * Denormalization for Authorization:
 *  - The `Group` entity needs an `ownerId` field to properly control write access.  The current schema lacks this.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls read and write access to the /groups/{groupId} collection.
     * @path /groups/{groupId}
     * @allow (get, list): Any user can read any group's information.
     * @allow (create): Only an authenticated user can create a group, if `request.auth.uid` matches `request.resource.data.ownerId`.  The schema lacks the ownerId field, therefore this rule cannot be adequately implemented.
     * @deny (update, delete):  All updates and deletes are denied.  The schema lacks the ownerId field, therefore this rule cannot be adequately implemented.
     * @principle Public read, owner-only writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Group' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}